/*
 *
 * Adelyte Company
 * www.adelyte.com
 *
 */

// Compiler Directives

#SYMBOL_NAME "Crestron AMFM Channel Text"
#CATEGORY "37" // Tuners
#DEFAULT_VOLATILE


// Constants

#DEFINE_CONSTANT FM_CEILING_FREQUENCY 10800
#DEFINE_CONSTANT FM_FLOOR_FREQUENCY    8750

#DEFINE_CONSTANT AM_CEILING_FREQUENCY  1710
#DEFINE_CONSTANT AM_FLOOR_FREQUENCY     530

#DEFINE_CONSTANT WX_CEILING_FREQUENCY     7
#DEFINE_CONSTANT WX_FLOOR_FREQUENCY       1

// Inputs and Outputs

ANALOG_INPUT  ai_Frequency[21];  // Maximum number of presets + 1.

STRING_OUTPUT so_Frequency[21];


// Global Data




// FUNCTIONS

FUNCTION MakeFMFrequency(INTEGER index)
{
    MAKESTRING(so_Frequency[index], "%u.%u MHz", ai_Frequency[index] / 100, (ai_Frequency[index] / 10) MOD 10);
}

FUNCTION MakeAMFrequency(INTEGER index)
{
    MAKESTRING(so_Frequency[index], "%u KHz", ai_Frequency[index]);
}

FUNCTION MakeWXFrequency(INTEGER index)
{
    MAKESTRING(so_Frequency[index], "%u WX", ai_Frequency[index]);
}


// Event Handlers

CHANGE ai_Frequency
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    IF((ai_Frequency[index] >= FM_FLOOR_FREQUENCY) && (ai_Frequency[index] <= FM_CEILING_FREQUENCY))
    {
        MakeFMFrequency(index);
    }
    ELSE IF((ai_Frequency[index] >= AM_FLOOR_FREQUENCY) && (ai_Frequency[index] <= AM_CEILING_FREQUENCY))
    {
        MakeAMFrequency(index);
    }
    ELSE IF((ai_Frequency[index] >= WX_FLOOR_FREQUENCY) && (ai_Frequency[index] <= WX_CEILING_FREQUENCY))
    {
        MakeWXFrequency(index);
    }
    ELSE
    {
        PRINT("ERROR: Crestron C2N-TFM Station Feedback.usp\n");
        PRINT("    ai_Frequency[%u] = %u\n", index, ai_Frequency[index]);
        PRINT("    is invalid.\n");
    }
}


// Runtime

FUNCTION MAIN()
{
    SIGNED_INTEGER returnError;

    returnError = WAITFORINITIALIZATIONCOMPLETE();

    IF(returnError < 0)
    {
        PRINT("Error waiting for initialization.\n");
    }
}
