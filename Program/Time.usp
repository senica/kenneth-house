/*
 *
  Adelyte Company
  www.adelyte.com
 *
 */

#HELP_BEGIN
#HELP_END

/*
 *
  Compiler Directives
 *
 */

#SYMBOL_NAME "Time"
#CATEGORY "16" // Time/Date
#DEFAULT_VOLATILE
#ENABLE_DYNAMIC

/*
 *
  Constants
 *
 */

#DEFINE_CONSTANT #SERVER_ADDRESS_LEN  255

/*
 *
  Outputs
 *
 */

DIGITAL_OUTPUT out_Time_PM;
ANALOG_OUTPUT  out_24_Hour_Time, out_12_Hour_Time;

ANALOG_OUTPUT  out_Hour_Hand, out_Minute_Hand;

STRING_OUTPUT  out_TOD$;
STRING_OUTPUT  out_Date;

DIGITAL_OUTPUT out_Connect;
STRING_OUTPUT  out_TX$;

/*
 *
  Parameters
 *
 */

INTEGER_PARAMETER param_Daylight_Saving;

#BEGIN_PARAMETER_PROPERTIES param_Daylight_Saving

    propDEFAULTVALUE = 1d;
    propDEFAULTUNIT = unitDECIMAL;
    propLIST = {1d, "Yes"}, {0d, "No"};

#END_PARAMETER_PROPERTIES

INTEGER_PARAMETER param_Date_Format;

#BEGIN_PARAMETER_PROPERTIES param_Date_Format

    propDEFAULTVALUE = 0d;
    propDEFAULTUNIT = unitDECIMAL;
    propLIST = {0d, "YYYY-MM-DD (ISO 8601)"}, {1d, "D MMMM YYYY"}, {2d, "MMMM D, YYYY"}, {11d, "DD/MM/YY"}, {12d, "MM/DD/YY"}, {21d, "DD-MM-YY"}, {22d, "MM-DD-YY"};

#END_PARAMETER_PROPERTIES


/*
 *
  Servers
 *
 */

/*
#DEFINE_CONSTANT #SERVERS_MAX  22
#DEFINE_CONSTANT #ADDRESS_LEN 255

STRUCTURE STRUCT_SERVER
{
    STRING hostname[#ADDRESS_LEN];
    STRING ip_address[#ADDRESS_LEN];
};

STRUCT_SERVER Servers[#SERVERS_MAX];

INTEGER ServerIndex;

STRING_FUNCTION SetServers()
{
    Servers[01].hostname   = "time.nist.gov";                // NCAR, Boulder, Colorado
    Servers[01].ip_address = "192.43.244.18";
    Servers[02].hostname   = "time-a.nist.gov";              // NIST, Gaithersburg, Maryland
    Servers[02].ip_address = "129.6.15.28";
    Servers[03].hostname   = "time-b.nist.gov";              // NIST, Gaithersburg, Maryland
    Servers[03].ip_address = "129.6.15.29";
    Servers[04].hostname   = "time-a.timefreq.bldrdoc.gov";  // NIST, Boulder, Colorado
    Servers[04].ip_address = "132.163.4.101";
    Servers[05].hostname   = "time-b.timefreq.bldrdoc.gov";  // NIST, Boulder, Colorado
    Servers[05].ip_address = "132.163.4.102";
    Servers[06].hostname   = "time-c.timefreq.bldrdoc.gov";  // NIST, Boulder, Colorado
    Servers[06].ip_address = "132.163.4.103";
    Servers[07].hostname   = "nist1.uccaribe.edu";           // Bayamon, Puerto Rico
    Servers[07].ip_address = "200.50.25.62";
    Servers[08].hostname   = "nist1-ny.ustiming.org";        // New York City, NY
    Servers[08].ip_address = "64.90.182.55";
    Servers[09].hostname   = "nist1-dc.ustiming.org";        // Alexandria, Virginia
    Servers[09].ip_address = "206.246.118.250";
    Servers[10].hostname   = "nist1.aol-va.symmetricom.com"; // Reston, Virginia
    Servers[10].ip_address = "64.236.96.53";
    Servers[11].hostname   = "nist1.columbiacountyga.gov";   // Columbia County, Georgia
    Servers[11].ip_address = "68.216.79.113";
    Servers[12].hostname   = "nist1-chi.ustiming.org";       // Chicago, Illinois
    Servers[12].ip_address = "208.66.175.36";
    Servers[13].hostname   = "nist.expertsmi.com";           // Monroe, Michigan
    Servers[13].ip_address = "99.150.184.201";
    Servers[14].hostname   = "nist.netservicesgroup.com";    // Southfield, Michigan
    Servers[14].ip_address = "64.113.32.5";
    Servers[15].hostname   = "utcnist.colorado.edu";         // University of Colorado, Boulder
    Servers[15].ip_address = "128.138.140.44";
    Servers[16].hostname   = "utcnist2.colorado.edu";        // University of Colorado, Boulder
    Servers[16].ip_address = "128.138.188.172";
    Servers[17].hostname   = "ntp-nist.ldsbc.edu";           // LDSBC, Salt Lake City, Utah
    Servers[17].ip_address = "198.60.73.8";
    Servers[18].hostname   = "time-nw.nist.gov";             // Microsoft, Redmond, Washington
    Servers[18].ip_address = "131.107.13.100";
    Servers[19].hostname   = "nist1.aol-ca.symmetricom.com"; // Mountain View, California
    Servers[19].ip_address = "207.200.81.113";
    Servers[20].hostname   = "nist1.symmetricom.com";        // San Jose, California
    Servers[20].ip_address = "69.25.96.13";
    Servers[21].hostname   = "nist1-sj.ustiming.org";        // San Jose, California
    Servers[21].ip_address = "64.125.78.85";
    Servers[22].hostname   = "nist1-la.ustiming.org";        // Los Angeles, California
    Servers[22].ip_address = "64.147.116.229";
}
*/

/*
 *
  Time
 *
 */

FUNCTION PrintDate()
{
    SWITCH(param_Date_Format)
    {
        CASE(0):
        {
            MAKESTRING(out_Date, "%u-%02u-%02u", GETYEARNUM(), GETMONTHNUM(), GETDATENUM());
        }
        CASE(1):
        {
            MAKESTRING(out_Date, "%u %s %u", GETDATENUM(), MONTH(), GETYEARNUM());
        }
        CASE(2):
        {
            MAKESTRING(out_Date, "%s %u, %u", MONTH(), GETDATENUM(), GETYEARNUM());
        }
        CASE(11):
        {
            MAKESTRING(out_Date, "%02u-%02u-%02u", GETDATENUM(), GETMONTHNUM(), GETYEARNUM() MOD 100);
        }
        CASE(12):
        {
            MAKESTRING(out_Date, "%02u-%02u-%02u", GETMONTHNUM(), GETDATENUM(), GETYEARNUM() MOD 100);
        }
        CASE(21):
        {
            MAKESTRING(out_Date, "%02u/%02u/%02u", GETDATENUM(), GETMONTHNUM(), GETYEARNUM() MOD 100);
        }
        CASE(22):
        {
            MAKESTRING(out_Date, "%02u/%02u/%02u", GETMONTHNUM(), GETDATENUM(), GETYEARNUM() MOD 100);
        }
    }
}

FUNCTION PrintTime()
{
    INTEGER hseconds, seconds, minutes, hours;
    
    minutes = GETMINUTESNUM();
    hours   = GETHOURNUM();
    
    MAKESTRING(out_TOD$, "%02u%02u%04u%02u%02u000000", GETMONTHNUM(), GETDATENUM(), GETYEARNUM(), hours, minutes);
    
    out_24_Hour_Time = hours * 60 + minutes;
    out_12_Hour_Time = (out_24_Hour_Time + 660) MOD 720 + 60;
    
    out_Hour_Hand   = (hours MOD 12) * 5 + (minutes / 12);
    out_Minute_Hand = minutes;
    
    IF(hours > 11)
    {
        out_Time_PM = 1;
    }
    ELSE
    {
        out_Time_PM = 0;
    }
    
    seconds  = GETSECONDSNUM();
    hseconds = seconds * 100;
    
    DELAY(6000 - hseconds);
}

/*
 *
  TCP Client
 *
 */

DIGITAL_INPUT in_Connect_FB;
ANALOG_INPUT  in_Status;
STRING_INPUT  in_RX$[255];

INTEGER WaitDaytime;

FUNCTION ConnectServer()
{
    SIGNED_INTEGER status;
    
    TRACE("TIME> ConnectServer()");
    
    IF(out_Connect = 1)
    {
        out_Connect = 0;
        
        PROCESSLOGIC();
    }
    
    out_Connect = 1;
    
    IF(WaitDaytime = 0)
    {
        WaitDaytime = 1;
        
	    WAIT(6000, DAYTIME)
	    {
            TRACE("TIME> ConnectServer() WAIT DAYTIME");
            
            WaitDaytime = 0;
            
	        ConnectServer();
	    }
    }
}

CHANGE in_Status
{
    SIGNED_INTEGER status;
    
    status = in_Status;
    
    TRACE("TIME> CHANGE in_Status: status %d", status);
    
    IF(status = 4 || status = 5)
    {
        out_Connect = 0;
        
        CANCELWAIT(DAYTIME);
    }
}

#DEFINE_CONSTANT #DAYTIME_LEN 48

#DEFINE_CONSTANT #HOURS_LEN   2
#DEFINE_CONSTANT #MINUTES_LEN 2
#DEFINE_CONSTANT #SECONDS_LEN 2
#DEFINE_CONSTANT #TIME_LEN    8

#DEFINE_CONSTANT #DST_LEN     2

#DEFINE_CONSTANT #YEARS_LEN   2
#DEFINE_CONSTANT #MONTHS_LEN  2
#DEFINE_CONSTANT #DAYS_LEN    2
#DEFINE_CONSTANT #DATE_LEN    8

CHANGE in_RX$
{
    INTEGER time_position, hours, minutes, seconds, 
            date_position, years, months, days, 
            daylight_saving;
    SIGNED_INTEGER utc_offset;
    STRING received[#DAYTIME_LEN];
    
    /*
     *
      Expected String
      
      JJJJJ YY-MM-DD HH:MM:SS TT L H msADV UTC(NIST) *
      
      JJJJJ       - Modified Julian Date
      YY-MM-DD    - Year, month, day
      HH:MM:SS    - Current time
      TT          - DST code
      L           - Leap second indicator
      H           - Health of server
      msADV       - Milisecond compensation for network delays
      UTC(NIST) * - Label and on-time marker
     *
     */
    
    TRACE("TIME> CHANGE in_RX$ '%s'", in_RX$);
    
    received = GATHER("*", in_RX$);
    
    TRACE("TIME> CHANGE in_RX$: received '%s'", received);
    
    time_position = FIND(":", received) - #HOURS_LEN;
    
    hours = ATOI(MID(received, time_position, #HOURS_LEN));
    minutes = ATOI(MID(received, time_position + 3, #MINUTES_LEN));
    seconds = ATOI(MID(received, time_position + 6, #SECONDS_LEN));
    
    utc_offset = GETGMTOFFSET();
    
    IF(param_Daylight_Saving = 1)
    {
        daylight_saving = ATOI(MID(received, time_position + #TIME_LEN + 1, #DST_LEN));
        
        IF(daylight_saving = 0 || daylight_saving = 1 || daylight_saving > 51) // ST if TT = 0, TT = 1, or TT > 51
        {
            // utc_offset = utc_offset;
        }
        ELSE IF(1 < daylight_saving && daylight_saving <= 51) // DST if 1 < TT <= 51
        {
            utc_offset = utc_offset + 1;
        }
        ELSE
        {
            GENERATEUSERERROR("Unknown DST value %u", daylight_saving);
        }
    }
    ELSE
    {
        // Pass.
    }
    
    date_position = FIND("-", received) - #YEARS_LEN;
    
    years  = ATOI(MID(received, date_position, #YEARS_LEN)) + 2000;
    months = ATOI(MID(received, date_position + 3, #MONTHS_LEN));
    days   = ATOI(MID(received, date_position + 6, #DAYS_LEN));
    
    IF(utc_offset > 0)
    {
        IF((hours + utc_offset) / 24 = 1)
        {
            days = days + 1;
        }
    }
    ELSE IF(utc_offset < 0)
    {
        IF((24 + hours + utc_offset) / 24 = 0)
        {
            days = days - 1;
        }
    }
    ELSE
    {
        // Pass.
    }
    
    hours = (24 + hours + utc_offset) MOD 24;
    
    SETCLOCK(hours, minutes, seconds);
    SETDATE(months, days, years);
    
    PrintDate();
    PrintTime();
}

/*
 *
  Commands
 *
 */

DIGITAL_INPUT in_Refresh;

PUSH in_Refresh
{
    CANCELWAIT(DAYTIME);
    
    ConnectServer();
}

/*
 *
  Runtime
 *
 */

FUNCTION Main()
{
    WaitDaytime = 0;
    
    //ConnectServer();
    
    WHILE(1)
    {
        IF(GETMINUTESNUM() = 0)
        {
            SWITCH(GETHOURNUM())
            {
                CASE(0): // 12:00 am
                {
                    PrintDate();
                }
                CASE(2): // 2:00 am
                {
                    //ConnectServer();
                }
            }
        }
        
        PrintTime();
    }
}
